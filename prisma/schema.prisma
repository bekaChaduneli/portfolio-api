generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  role     Role   @default(ADMIN)
}

model Books {
  id           String              @id @default(cuid())
  pages        String
  readedPages  String
  image        String              @default("")
  releaseDate  DateTime
  link         String
  translations BooksTranslations[]
}

model BooksTranslations {
  id          String  @id @default(cuid())
  title       String
  description String
  author      String
  booksId     String?
  Books       Books?  @relation(fields: [booksId], references: [id], onDelete: Cascade)
}

model GithubRepos {
  id           String                    @id @default(cuid())
  link         String
  stars        String
  language     String
  translations GithubReposTranslations[]
}

model GithubReposTranslations {
  id            String       @id @default(cuid())
  title         String
  description   String
  githubReposId String?
  GithubRepos   GithubRepos? @relation(fields: [githubReposId], references: [id], onDelete: Cascade)
}

model Linkedin {
  id           String                 @id @default(uuid())
  image        String
  banner       String
  link         String
  translations LinkedinTranslations[]
  posts        Posts[]
  topSkills    TopSkills[]
}

model LinkedinTranslations {
  id         String    @id @default(cuid())
  name       String
  bio        String
  company    String
  university String
  linkedinId String?
  Linkedin   Linkedin? @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
}

model Posts {
  id           String              @id @default(uuid())
  linkedinId   String?
  Linkedin     Linkedin?           @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  createdAt    DateTime            @default(now())
  image        String?
  likes        String
  commentsSum  String
  link         String
  translations PostsTranslations[]
}

model PostsTranslations {
  id           String  @id @default(cuid())
  linkedinName String
  description  String
  postsId      String?
  Posts        Posts?  @relation(fields: [postsId], references: [id], onDelete: Cascade)
}

model TopSkills {
  id           String                  @id @default(uuid())
  linkedinId   String?
  Linkedin     Linkedin?               @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  translations TopSkillsTranslations[]
}

model TopSkillsTranslations {
  id           String     @id @default(cuid())
  linkedinName String
  name         String
  topSkillsId  String?
  TopSkills    TopSkills? @relation(fields: [topSkillsId], references: [id], onDelete: Cascade)
}
