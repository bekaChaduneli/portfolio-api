generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(cuid())
  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Books {
  id           String              @id @default(cuid())
  index        Int                 @unique @default(autoincrement())
  pages        String
  readedPages  String
  type         String
  image        String
  releaseDate  DateTime            @default(now())
  link         String
  finished     Boolean
  translations BooksTranslations[]
}

model BooksTranslations {
  id           String  @id @default(cuid())
  title        String
  description  String
  author       String
  languageCode String
  booksId      String?
  books        Books?  @relation(fields: [booksId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([booksId, languageCode])
}

model GithubRepos {
  id           String                    @id @default(cuid())
  link         String
  stars        String
  language     String
  translations GithubReposTranslations[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model GithubReposTranslations {
  id            String      @id @default(cuid())
  title         String
  description   String
  languageCode  String
  githubReposId String
  githubRepos   GithubRepos @relation(fields: [githubReposId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([githubReposId, languageCode])
}

model Linkedin {
  id           String                 @id @default(uuid())
  image        String
  banner       String
  link         String
  translations LinkedinTranslations[]
  posts        Posts[]
  topSkills    TopSkills[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model LinkedinTranslations {
  id           String   @id @default(cuid())
  name         String
  bio          String
  company      String
  languageCode String
  university   String
  linkedinId   String
  linkedin     Linkedin @relation(fields: [linkedinId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([linkedinId, languageCode])
}

model Posts {
  id           String              @id @default(uuid())
  linkedinId   String              @unique
  linkedin     Linkedin            @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  image        String?
  likes        String
  commentsSum  String
  link         String
  translations PostsTranslations[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PostsTranslations {
  id           String @id @default(cuid())
  linkedinName String
  languageCode String
  description  String
  postsId      String
  posts        Posts  @relation(fields: [postsId], references: [id], onDelete: Cascade)

  reatedAt  DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([postsId, languageCode])
}

model TopSkills {
  id           String                  @id @default(uuid())
  linkedinId   String                  @unique
  linkedin     Linkedin                @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  translations TopSkillsTranslations[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model TopSkillsTranslations {
  id           String     @id @default(cuid())
  linkedinName String
  languageCode String
  name         String
  topSkillsId  String
  topSkills    TopSkills? @relation(fields: [topSkillsId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([topSkillsId, languageCode])
}

model Profile {
  id           String                @id @default(cuid())
  age          String
  resume       String
  Image        String
  socials      Socials[]
  translations ProfileTranslations[]
  mail         String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProfileTranslations {
  id String @id @default(cuid())

  name            String
  surname         String
  languageCode    String
  profession      String
  location        String
  experience      String
  works           ProfileWorks[]
  university      String
  universityAbout String
  aboutMe         String
  profile         Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId       String
  hobbys          Hobbys[]
  questions       Questions[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([profileId, languageCode])
}

model Questions {
  id String @id @default(cuid())

  profileTranslations   ProfileTranslations     @relation(fields: [profileTranslationsId], references: [id], onDelete: Cascade)
  profileTranslationsId String                  @unique
  translations          QuestionsTranslations[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model QuestionsTranslations {
  id           String    @id @default(cuid())
  languageCode String
  question     String
  answer       String
  questions    Questions @relation(fields: [questionsId], references: [id], onDelete: Cascade)
  questionsId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([questionsId, languageCode])
}

model Hobbys {
  id String @id @default(cuid())

  profileTranslations   ProfileTranslations  @relation(fields: [profileTranslationsId], references: [id])
  profileTranslationsId String               @unique
  translations          HobbysTranslations[]
  image                 String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model HobbysTranslations {
  id           String @id @default(cuid())
  hobby        String
  languageCode String
  aboutHobby   String
  hobbys       Hobbys @relation(fields: [hobbysId], references: [id], onDelete: Cascade)
  hobbysId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([hobbysId, languageCode])
}

model ProfileWorks {
  id                    String                     @id @default(cuid())
  workLogo              String
  fromDate              String
  toDate                String
  translations          ProfileWorksTranslations[]
  profileTranslations   ProfileTranslations        @relation(fields: [profileTranslationsId], references: [id])
  profileTranslationsId String                     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProfileWorksTranslations {
  id             String       @id @default(cuid())
  languageCode   String
  profileWorks   ProfileWorks @relation(fields: [profileWorksId], references: [id], onDelete: Cascade)
  profileWorksId String
  work           String
  workAbout      String
  position       String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([profileWorksId, languageCode])
}

model Socials {
  id        String  @id @default(cuid())
  profileId String  @unique
  profile   Profile @relation(fields: [profileId], references: [id])
  name      String
  link      String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MainProjects {
  id                String   @id @default(cuid())
  background        String
  mobileBackgrounds String[]
  link              String
  video             String[]
  images            String[]
  skills            String[]
  github            String
  isReal            Boolean

  translations MainProjectsTranslations[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MainProjectsTranslations {
  id             String       @id @default(cuid())
  languageCode   String
  description    String
  name           String
  about          String
  location       String
  mainProjects   MainProjects @relation(fields: [mainProjectsId], references: [id], onDelete: Cascade)
  mainProjectsId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  archiveId String?

  @@unique([mainProjectsId, languageCode])
}

model Archive {
  id           String                @id @default(cuid())
  link         String
  github       String
  background   String
  isReal       Boolean
  skills       String[]
  translations ArchiveTranslations[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ArchiveTranslations {
  id           String  @id @default(cuid())
  languageCode String
  description  String
  name         String
  archive      Archive @relation(fields: [archiveId], references: [id], onDelete: Cascade)
  archiveId    String
  location     String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([archiveId, languageCode])
}

model Skills {
  id           String               @id @default(cuid())
  link         String
  color        String
  image        String
  translations SkillsTranslations[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SkillsTranslations {
  id           String @id @default(cuid())
  languageCode String
  name         String
  about        String
  skills       Skills @relation(fields: [skillsId], references: [id], onDelete: Cascade)
  skillsId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([skillsId, languageCode])
}

model Blogs {
  id         String @id @default(cuid())
  link       String
  background String

  translations BlogsTranslations[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model BlogsTranslations {
  id           String @id @default(cuid())
  languageCode String

  headline String
  about    String

  blogs     Blogs    @relation(fields: [blogsId], references: [id], onDelete: Cascade)
  blogsId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([blogsId, languageCode])
}

model Services {
  id           String                 @id @default(cuid())
  translations ServicesTranslations[]
  background   String
  order        String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ServicesTranslations {
  id           String   @id @default(cuid())
  languageCode String
  services     Services @relation(fields: [servicesId], references: [id], onDelete: Cascade)
  servicesId   String
  name         String
  description  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  @@unique([servicesId, languageCode])
}

model AboutMe {
  id           String                @id @default(cuid())
  translations AboutMeTranslations[]
  image        String
  experience   String
  age          String
  projectNum   String
  works        Works[]
  education    Educations[]
  languages    Languages[]
  certificates Certificates[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @default(now()) @updatedAt
}

model AboutMeTranslations {
  id           String  @id @default(cuid())
  languageCode String
  aboutMe      AboutMe @relation(fields: [aboutMeId], references: [id], onDelete: Cascade)
  aboutMeId    String
  name         String
  about        String
  role         String
  country      String
  city         String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([aboutMeId, languageCode])
}

model Works {
  id           String              @id @default(cuid())
  aboutMe      AboutMe             @relation(fields: [aboutMeId], references: [id])
  aboutMeId    String              @unique
  translations WorksTranslations[]
  link         String
  fromDate     DateTime
  toDate       DateTime
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @default(now()) @updatedAt
}

model WorksTranslations {
  id             String @id @default(cuid())
  languageCode   String
  works          Works  @relation(fields: [worksId], references: [id], onDelete: Cascade)
  worksId        String
  company        String
  role           String
  description    String
  location       String
  locationType   String
  employmentType String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([worksId, languageCode])
}

model Educations {
  id           String                   @id @default(cuid())
  aboutMe      AboutMe                  @relation(fields: [aboutMeId], references: [id])
  aboutMeId    String                   @unique
  translations EducationsTranslations[]
  link         String
  fromDate     DateTime
  toDate       DateTime
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @default(now()) @updatedAt
}

model EducationsTranslations {
  id           String     @id @default(cuid())
  languageCode String
  educations   Educations @relation(fields: [educationsId], references: [id], onDelete: Cascade)
  educationsId String
  name         String
  degree       String
  fieldOfStudy String
  gpa          String?
  description  String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([educationsId, languageCode])
}

model Languages {
  id           String                  @id @default(cuid())
  aboutMe      AboutMe                 @relation(fields: [aboutMeId], references: [id])
  aboutMeId    String                  @unique
  translations LanguagesTranslations[]
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @default(now()) @updatedAt
}

model LanguagesTranslations {
  id           String    @id @default(cuid())
  languageCode String
  languages    Languages @relation(fields: [languagesId], references: [id], onDelete: Cascade)
  languagesId  String
  name         String
  description  String
  level        String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([languagesId, languageCode])
}

model Certificates {
  id             String                     @id @default(cuid())
  aboutMe        AboutMe                    @relation(fields: [aboutMeId], references: [id])
  aboutMeId      String                     @unique
  translations   CertificatesTranslations[]
  link           String
  image          String
  issueDate      DateTime
  expirationDate String
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @default(now()) @updatedAt
}

model CertificatesTranslations {
  id             String       @id @default(cuid())
  languageCode   String
  certificates   Certificates @relation(fields: [certificatesId], references: [id], onDelete: Cascade)
  certificatesId String
  name           String
  organiation    String
  description    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  @@unique([certificatesId, languageCode])
}

model Recommendations {
  id           String                        @id @default(cuid())
  translations RecommendationsTranslations[]
  createdAt    DateTime                      @default(now())
  image        String
  date         DateTime
  updatedAt    DateTime                      @default(now()) @updatedAt
}

model RecommendationsTranslations {
  id                String          @id @default(cuid())
  languageCode      String
  recommendations   Recommendations @relation(fields: [recommendationsId], references: [id], onDelete: Cascade)
  recommendationsId String
  name              String
  bio               String
  role              String
  description       String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt

  @@unique([recommendationsId, languageCode])
}
